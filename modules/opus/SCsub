#!/usr/bin/env python
from misc.utility.scons_hints import *

Import("env")
Import("env_modules")

env_opus = env_modules.Clone()

# Thirdparty source files

thirdparty_obj = []

if env["builtin_libopus"]:
    thirdparty_dir = "#thirdparty/libopus/"
    thirdparty_flags = ["CUSTOM_MODES", "OPUS_BUILD", "USE_ALLOCA"]

    thirdparty_sources = [
        "src/analysis.c",
        "src/extensions.c",
        "src/mapping_matrix.c",
        "src/mlp.c",
        "src/mlp_data.c",
        "src/opus.c",
        "src/opus_compare.c",
        "src/opus_decoder.c",
        "src/opus_demo.c",
        "src/opus_encoder.c",
        "src/opus_multistream.c",
        "src/opus_multistream_decoder.c",
        "src/opus_multistream_encoder.c",
        "src/opus_projection_decoder.c",
        "src/opus_projection_encoder.c",
        "src/repacketizer.c",
        "src/repacketizer_demo.c",
        "silk/A2NLSF.c",
        "silk/ana_filt_bank_1.c",
        "silk/biquad_alt.c",
        "silk/bwexpander_32.c",
        "silk/bwexpander.c",
        "silk/check_control_input.c",
        "silk/CNG.c",
        "silk/code_signs.c",
        "silk/control_audio_bandwidth.c",
        "silk/control_codec.c",
        "silk/control_SNR.c",
        "silk/debug.c",
        "silk/dec_API.c",
        "silk/decode_core.c",
        "silk/decode_frame.c",
        "silk/decode_indices.c",
        "silk/decode_parameters.c",
        "silk/decode_pitch.c",
        "silk/decode_pulses.c",
        "silk/decoder_set_fs.c",
        "silk/enc_API.c",
        "silk/encode_indices.c",
        "silk/encode_pulses.c",
        "silk/gain_quant.c",
        "silk/HP_variable_cutoff.c",
        "silk/init_decoder.c",
        "silk/init_encoder.c",
        "silk/inner_prod_aligned.c",
        "silk/interpolate.c",
        "silk/lin2log.c",
        "silk/log2lin.c",
        "silk/LPC_analysis_filter.c",
        "silk/LPC_fit.c",
        "silk/LPC_inv_pred_gain.c",
        "silk/LP_variable_cutoff.c",
        "silk/NLSF2A.c",
        "silk/NLSF_decode.c",
        "silk/NLSF_del_dec_quant.c",
        "silk/NLSF_encode.c",
        "silk/NLSF_stabilize.c",
        "silk/NLSF_unpack.c",
        "silk/NLSF_VQ.c",
        "silk/NLSF_VQ_weights_laroia.c",
        "silk/NSQ.c",
        "silk/NSQ_del_dec.c",
        "silk/pitch_est_tables.c",
        "silk/PLC.c",
        "silk/process_NLSFs.c",
        "silk/quant_LTP_gains.c",
        "silk/resampler.c",
        "silk/resampler_down2_3.c",
        "silk/resampler_down2.c",
        "silk/resampler_private_AR2.c",
        "silk/resampler_private_down_FIR.c",
        "silk/resampler_private_IIR_FIR.c",
        "silk/resampler_private_up2_HQ.c",
        "silk/resampler_rom.c",
        "silk/shell_coder.c",
        "silk/sigm_Q15.c",
        "silk/sort.c",
        "silk/stereo_decode_pred.c",
        "silk/stereo_encode_pred.c",
        "silk/stereo_find_predictor.c",
        "silk/stereo_LR_to_MS.c",
        "silk/stereo_MS_to_LR.c",
        "silk/stereo_quant_pred.c",
        "silk/sum_sqr_shift.c",
        "silk/table_LSF_cos.c",
        "silk/tables_gain.c",
        "silk/tables_LTP.c",
        "silk/tables_NLSF_CB_NB_MB.c",
        "silk/tables_NLSF_CB_WB.c",
        "silk/tables_other.c",
        "silk/tables_pitch_lag.c",
        "silk/tables_pulses_per_block.c",
        "silk/VAD.c",
        "silk/VQ_WMat_EC.c",
        "celt/bands.c",
        "celt/celt.c",
        "celt/celt_decoder.c",
        "celt/celt_encoder.c",
        "celt/celt_lpc.c",
        "celt/cwrs.c",
        "celt/entcode.c",
        "celt/entdec.c",
        "celt/entenc.c",
        "celt/kiss_fft.c",
        "celt/laplace.c",
        "celt/mathops.c",
        "celt/mdct.c",
        "celt/modes.c",
        "celt/opus_custom_demo.c",
        "celt/pitch.c",
        "celt/quant_bands.c",
        "celt/rate.c",
        "celt/vq.c",
    ]

    thirdparty_inc_dirs = [thirdparty_dir + dir for dir in ["opus/", "celt/", "silk/", "silk/float/"]]
    thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]

    env_opus.Prepend(CPPPATH=[thirdparty_dir, *thirdparty_inc_dirs])
    env_opus.Append(CPPDEFINES=thirdparty_flags)

    # also requires libogg
    if env["builtin_libogg"]:
        env_opus.Prepend(CPPPATH=["#thirdparty/libogg"])

    env_thirdparty = env_opus.Clone()
    env_thirdparty.disable_warnings()
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_sources)
    env.modules_sources += thirdparty_obj


# Godot source files

module_obj = []

env_opus.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj

# Needed to force rebuilding the module files when the thirdparty library is updated.
env.Depends(module_obj, thirdparty_obj)
